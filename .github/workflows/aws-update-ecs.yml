# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "master" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

on:
  push:
    branches:
      - master
  workflow_dispatch:  # Allows you to manually trigger the workflow

env:
  TF_WORKING_DIR: infra
  APP_DOCKER_WORKING_DIR: my-app
#   AWS_REGION: ${{ env.region }}                       # set this to your preferred AWS region, e.g. us-west-1
#   ECR_REPOSITORY: ${{ env.ecr_repository_name }}       # set this to your Amazon ECR repository name
#   ECS_SERVICE: ${{ env.ecs_service_name }}          # set this to your Amazon ECS service name
#   ECS_CLUSTER: ${{ env.ecs_cluster_name }}          # set this to your Amazon ECS cluster name
#   ECS_TASK_DEFINITION: ${{ env.ecs_task_definition }}  # set this to the path to your Amazon ECS task definition
#                                                       # file, e.g. .aws/task-definition.json
#   CONTAINER_NAME: ${{ env.ecs_container_name }}       # set this to the name of the container in the
#                                                       # containerDefinitions section of your task definition

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4     # This is an action that checks out your repository onto the runner, allowing you to run scripts or other actions against your code (such as build and test tools). You should use the checkout action any time your workflow will use the repository's code.

    - name: Get Terraform Outputs
      uses: ./.github/actions/get-terraform-outputs
      with:
        outputs_of_interest: "region ecr_repository_name ecs_service_name ecs_cluster_name task_arn ecs_container_name"
        tf_working_dir: ${{ env.TF_WORKING_DIR }}

    - name: Map Terraform Outputs to Environment Variables
      run: |
        echo "AWS_REGION=${{ env.region }}" >> $GITHUB_ENV
        echo "ECR_REPOSITORY=${{ env.ecr_repository_name }}" >> $GITHUB_ENV
        echo "ECS_SERVICE=${{ env.ecs_service_name }}" >> $GITHUB_ENV
        echo "ECS_CLUSTER=${{ env.ecs_cluster_name }}" >> $GITHUB_ENV
        echo "ECS_TASK_DEFINITION=${{ env.task_arn }}" >> $GITHUB_ENV
        echo "CONTAINER_NAME=${{ env.ecs_container_name }}" >> $GITHUB_ENV

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}  # Built-in GitHub Actions variable that holds the commit SHA for the event that triggered the workflow. It will provide a unique tag for the Docker image, allowing it to be specifically tied to this particular commit in the repository.
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        cd ${{ env.APP_DOCKER_WORKING_DIR }}
        docker build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
