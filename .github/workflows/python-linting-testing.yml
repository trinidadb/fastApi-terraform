# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "master" ]
    paths:
      - "my-app/**"
  pull_request:
    branches: [ "master" ]
    paths:
      - "my-app/**"
  workflow_dispatch:  # Allows you to manually trigger the workflow

env:
  PYTHON_CODE_DIR: my-app

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pylint bandit
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    # To decide which linter to use, refer to: https://trunk.io/learn/comparing-ruff-flake8-and-pylint-linting-speed
    # - name: Lint with pylint
    #   run: |
    #     pylint $(git ls-files '*.py')

    # - name: Test with pytest
    #   run: |
    #     pytest

    # For reference, read: https://pypi.org/project/bandit/1.6.3/
    - name: Security scan with bandit
      run: bandit -l -ii -r ${{ env.PYTHON_CODE_DIR }} -f json -o bandit-report.json

    - name: Upload bandit scan artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-findings
        path: bandit-report.json