name: Get Terraform Outputs

# Specify when the workflow should run
on:
  push:
    branches:
      - master
  workflow_dispatch:  # Allows you to manually trigger the workflow

env:
  OUTPUTS_OF_INTEREST: "region ecr_repository_name ecs_service_name ecs_cluster_name ecs_task_definition ecs_container_name" #this space-separated string can be treated as an array directly within loops, as Bash automatically splits strings by whitespace.

jobs:
  extract-terraform-outputs:
    runs-on: ubuntu-latest

    defaults:
        run:
            working-directory: infra
            shell: bash

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
            terraform_wrapper: false

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      - name: Get Specific Terraform Outputs
        id: terraform-outputs
        run: |
            for output in $OUTPUTS_OF_INTEREST; do
              value=$(terraform output -raw $output 2>/dev/null || echo "Output not found")   #In bash, 1 means stdout, 2 means stderr(standard error stream). 2> /dev/null means that, redirect the error output from this command to /dev/null. Essentially meaning, just get rid of the error messages
              echo "$output=$value" >> outputs.env
              echo "$value"
            done
      
      # Establecer el working-directory en infra no afectará a dónde se guarda el artefacto en GitHub Actions
      - name: Upload Outputs as Artifact
        uses: actions/upload-artifact@v3
        with:
            name: terraform-outputs
            path: infra/outputs.env